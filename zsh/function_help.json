[
  {
    "name": "kill_listening",
    "description": "Kill process listening on specified port",
    "usage": "kill_listening <port_number>",
    "parameters": [
      {
        "name": "port_number",
        "description": "Port number something is listening on"
      }
    ],
    "examples": [
      {
        "command": "kill_listening 8000",
        "description": "Force kill the process listening on port 8000"
      }
    ]
  },
  {
    "name": "join",
    "description": "array.join()",
    "usage": "join <var> <string> <elements>",
    "parameters": [
      {
        "name": "var",
        "description": "Variable to create"
      },
      {
        "name": "string",
        "description": "String to join on"
      },
      {
        "name": "elements",
        "description": "Array to join"
      }
    ],
    "examples": [
      {
        "command": "join joined ' and ' '${a[@]}'",
        "description": "(one and two and three three and four and five)"
      }
    ]
  },
  {
    "name": "update-dotfiles",
    "description": "Update dotfiles, can provide a comma separate list of tags",
    "usage": "update-dotfiles <tag>",
    "parameters": [
      {
        "name": "tags",
        "description": "Tags to use during Ansible execution"
      }
    ],
    "examples": [
      {
        "command": "update-dotfiles binaries",
        "description": "run the playbook with just the binaries tag"
      },
      {
        "command": "update-dotfiles binaries,commands",
        "description": "run the playbook with binaries and commands tags"
      }
    ]
  },
  {
    "name": "aws_get_instance_pricing",
    "description": "Get pricing information for AWS Instances",
    "usage": "aws_get_instance_pricing <instance_type>",
    "parameters": [
      {
        "name": "instance_type",
        "description": "A single instance type to get pricing for"
      }
    ],
    "examples": [
      {
        "command": "aws_get_instance_pricing c5.9xlarge",
        "description": "Get the pricing information just for the c5.9xlarge instance type"
      }
    ]
  },
  {
    "name": "docker_retag_and_push",
    "description": "Retag a Docker image with the provided tag and registry.",
    "usage": "docker_retag_and_push <image> <tag> <registry>",
    "parameters": [
      {
        "name": "image",
        "description": "Name of an image to retag"
      },
      {
        "name": "tag",
        "description": "New tag name (Default: dev)"
      },
      {
        "name": "registry",
        "description": "The registry to push to (Default: quay.io/reynn)"
      }
    ],
    "examples": [
      {
        "command": "docker_retag_and_push test-image",
        "description": "Retag test-image to quay.io/reynn/test-image:dev"
      },
      {
        "command": "docker_retag_and_push test-image:snapshot",
        "description": "Retag test-image:snapshot to quay.io/reynn/test-image:dev"
      }
    ]
  },
  {
    "name": "aws_get_matching_stacks",
    "description": "Get AWS CloudFormation stacks matching a certain criteria",
    "usage": "aws_get_matching_stacks <matcher>",
    "parameters": [
      {
        "name": "matcher",
        "description": "Regular expression to match names against"
      }
    ],
    "examples": [
      {
        "command": "aws_get_matching_stacks *test*",
        "description": "Find stacks including the word test anywhere in the name."
      }
    ]
  },
  {
    "name": "gh_get_assets",
    "description": "Get AWS CloudFormation stacks matching a certain criteria",
    "usage": "gh_get_assets <owner> <repo> <host>",
    "parameters": [
      {
        "name": "owner",
        "description": "The owner of the repository in GitHub"
      },
      { "name": "repo", "description": "The repository to get assets from" },
      {
        "name": "host",
        "description": "The API url to check. (Default: api.github.com)"
      }
    ],
    "examples": [
      {
        "command": "gh_get_assets stedolan jq",
        "description": "Get the assets for the most recent JQ release in GitHub"
      },
      {
        "command": "gh_get_assets stedolan jq api.github.enterprise.com",
        "description": "Get the latest assets from GCPD in Github Enterprise"
      }
    ]
  },
  {
    "name": "install_helm_chart",
    "description": "Install Helm chart based on set of available values files",
    "usage": "install_helm_chart",
    "parameters": [],
    "examples": []
  },
  {
    "name": "k8s_get_sa_config",
    "description": "Get a Kubeconfig.yaml for the specified Service account. Creates account if it doesn't exist.",
    "usage": "k8s_get_sa_config <sa_name> <namespace> <out_file>",
    "parameters": [
      {
        "name": "sa_name",
        "description": "Name of a K8S service account. Will be created if it doesn't exist."
      },
      {
        "name": "namespace",
        "description": "Namespace the service account should exist in."
      },
      {
        "name": "out_file",
        "description": "Where to write the kubeconfig to, will output to stdout if not set."
      }
    ],
    "examples": [
      {
        "command": "k8s_get_sa_config example-sa",
        "description": "Retag test-image to quay.io/reynn/test-image:dev"
      },
      {
        "command": "k8s_get_sa_config example-sa development",
        "description": "Create SA example-sa in the development namespace"
      }
    ]
  }
]
