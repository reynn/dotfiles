#!/usr/bin/env python3

import sys
import os

from argparse import ArgumentParser

FMT_ERROR = "38;5;m"
FMT_DEBUG = "38;5;243m"
FMT_INFO = "38;5;2m"
FMT_WARNING = "38;5;226m"
FMT_USAGE = "38;5;57m"


def _format_label(label: str) -> str:
    return "" if label is None or label == '' else f".{label}"


def _print(color: str, level: str, label: str, text: str):
    print(f"\033[{color}>> {level} >> {label} >> {text}\033[0m")


def print_debug(t: str, func_name: str, label: str):
    _print(FMT_DEBUG, 'debug', func_name+label, t)


def print_info(t: str, func_name: str, label: str):
    _print(FMT_INFO, 'info', func_name+label, t)


def print_warning(t: str, func_name: str, label: str):
    _print(FMT_WARNING, 'warning', func_name+label, t)


def print_error(t: str, func_name: str, label: str):
    _print(FMT_ERROR, 'error', func_name+label, t)


def main():
    '''
    example usage:
    py_print [level] [func_name] [label{optional}] [text]
    --------------------------------------------
    py_print \
      --level debug \
      --name install_helm_chart \
      --label selection \
      kfk_incubator_kafka.yaml
    >> debug >> install_helm_chart.selection >> kfk_incubator_kafka.yaml
    '''

    parser = ArgumentParser()
    parser.add_argument("--level", help="The level to print at")
    parser.add_argument("--name", help="The name of the calling function")
    parser.add_argument("--label", help="An optional label to add")
    parser.add_argument("text", help="The string to print")
    args = parser.parse_args()

    level = str(args.level).lower()
    func_name = str(args.name)
    label = _format_label(args.label)
    text = args.text

    if level == 'error':
        print_error(t=text, label=label, func_name=func_name)
    elif level == 'warning':
        print_warning(t=text, label=label, func_name=func_name)
    elif level == 'debug':
        print_debug(t=text, label=label, func_name=func_name)
    else:
        print_info(t=text, label=label, func_name=func_name)


if __name__ == '__main__':
    main()
