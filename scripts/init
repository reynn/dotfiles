#!/usr/bin/env bash

pad() { printf '%*s%s\n' "$(($1 - ${#2}))" "" "$2"; }
__log() {
  local log_args=("$@")
  local level='info'
  local color_reset="\033[0m"
  local message="$1"
  if test ${#log_args[@]} -gt 1; then
    level="$1"
    message="$2"
  fi
  local color_level="\033[0;33m"
  case $level in
  debug) color_level="\033[0;34m" ;;
  error) color_level="\033[0;31m" ;;
  fatal) color_level="\033[0;31m" ;;
  prompt) color_level="\033[0;35m" ;;
  warn) color_level="\033[0;32m" ;;
  esac

  echo -e "$color_level[$(pad 6 $level | tr '[:lower:]' '[:upper:]')] $message$color_reset" 1>&2
  if test "$level" = 'fatal'; then
    exit 2
  fi
}

executed_as_root() {
  test "$(id -u)" -eq 0 && echo 'true' || echo 'false'
}

check_for_command() {
  local CMD=$(command -v $1)
  if [ -z $CMD ]; then
    __log 'error' "Command ($1) is not available"
    return 2
  else
    __log "Command ($1) is available"
  fi
}

rust_check() {
  local cargo_location="${CARGO_HOME:-$HOME/.cargo}"
  if [ ! -d $cargo_location ]; then
    __log "Cargo is not found at $cargo_location"
  fi
}

python_packages() {
  __log "Python installation: $(dirname $PYTHON_BINARY)"

  __log 'Installing python packages'
  $PYTHON_BINARY -m pip install \
    --disable-pip-version-check \
    --no-cache-dir \
    --upgrade \
    --user \
    --quiet \
    ansible-core
}

platform_mac() {
  __log 'Installing Mac dependencies'
  if [ -z "$BREW_BINARY" ]; then
    __log 'Brew is not installed.'
  else
    __log 'Installing brew dependencies'
    __log "Brew installation: $(dirname $BREW_BINARY)"
    brew install tmux rsync wget
  fi
}

platform_linux() {
  local release="$(cat /etc/*release* | grep -G '^ID=.*' | cut -d= -f2 | tr '[:upper:]' '[:lower:]' | tr -d \")"
  local packages=(
    'git'
    'fish'
    'curl'
  )

  platform_linux_apt() {
    packages+=('python3' 'python3-pip' 'python3-apt')
    if test "$(executed_as_root)" = 'true'; then
      apt-get update && apt-get install -y gpg curl
      # Add the fish apt sources
      echo 'deb http://download.opensuse.org/repositories/shells:/fish:/release:/3/Debian_9.0/ /' |
        tee /etc/apt/sources.list.d/shells:fish:release:3.list
      # Pull the GPG key for Fish
      curl -fsSL https://download.opensuse.org/repositories/shells:fish:release:3/Debian_9.0/Release.key |
        gpg --dearmor |
        tee /etc/apt/trusted.gpg.d/shells_fish_release_3.gpg >/dev/null
      apt-get update &&
        apt-get upgrade -y &&
        apt-get install -y ${packages[@]}
    else
      sudo apt-get update && sudo apt-get install -y gpg curl
      echo 'deb http://download.opensuse.org/repositories/shells:/fish:/release:/3/Debian_9.0/ /' |
        sudo tee /etc/apt/sources.list.d/shells:fish:release:3.list
      curl -fsSL https://download.opensuse.org/repositories/shells:fish:release:3/Debian_9.0/Release.key |
        gpg --dearmor |
        sudo tee /etc/apt/trusted.gpg.d/shells_fish_release_3.gpg >/dev/null
      sudo apt-get update &&
        sudo apt-get upgrade -y &&
        sudo apt-get install -y ${packages[@]}
    fi
    return $?
  }

  platform_linux_dnf() {
    packages+=(
      'python3'
      'python3-pip'
      'ncurses'
    )
    __log "Installing [${#packages[@]}] packages with dnf"
    if test "$(executed_as_root)" = 'true'; then
      if test "$release" = 'centos'; then
        curl -SsL https://download.opensuse.org/repositories/shells:fish:release:3/CentOS_8/shells:fish:release:3.repo >/etc/yum.repos.d/shells:fish:release:3.repo
      fi
      dnf update -y &&
        dnf upgrade -y &&
        echo "${packages[@]}" | xargs -l dnf install -y
    else
      if test "$release" = 'centos'; then
        curl -SsL https://download.opensuse.org/repositories/shells:fish:release:3/CentOS_8/shells:fish:release:3.repo | sudo tee /etc/yum.repos.d/shells:fish:release:3.repo
      fi
      sudo dnf update -y &&
        sudo dnf upgrade -y &&
        echo "${packages[@]}" | xargs -l sudo dnf install -y
    fi
    return $?
  }

  platform_linux_pacman() {
    packages+=(
      'python'
      'python-pip'
      'openssh'
    )
    __log "Installing [${#packages[@]}] packages with pacman"
    # Get latest from configured pacman repos
    # Update the system packages
    if test "$(executed_as_root)" = 'true'; then
      __log 'Executing pacman assuming already root'
      if [ ! -d /build/packages ]; then
        mkdir -p /build/packages
        touch /build/packages/packages.db
      fi
      pacman --sync --refresh --sysupgrade --noconfirm &&
        echo "${packages[@]}" | xargs -l pacman --noconfirm -S
      return $?
    else
      __log 'Executing pacman assuming not already root'
      if [ ! -d /build/packages ]; then
        sudo mkdir -p /build/packages
        sudo touch /build/packages/packages.db
      fi
      sudo pacman --sync --refresh --sysupgrade --noconfirm &&
        echo "${packages[@]}" | xargs -l sudo pacman --noconfirm -S
      return $?
    fi
    return $?
  }

  case "$release" in
  debian | ubuntu) platform_linux_apt || __log 'fatal' 'Failed to install packages with APT' ;;
  centos | fedora) platform_linux_dnf || __log 'fatal' 'failed to install packages with DNF' ;;
  manjaro | arch) platform_linux_pacman || __log 'fatal' 'failed to install packages with Pacman' ;;
  *) __log 'fatal' "Unsupported/Unknown Linux distribution $release" ;;
  esac
}

ansible_run() {
  __log 'Running ansible playbook'
  ANSIBLE_CONFIG=$TMP_DFP/ansible/ansible.cfg ansible-playbook "$TMP_DFP/ansible/config.yaml" || __log 'fatal' 'Failure in ansible run'
}

clone() {
  __log 'Preparing to clone Git repository'
  check_for_command 'git' || __log 'fatal' '`git` is not installed'
  # check_for_command 'ssh-keygen' || __log 'fatal' '`ssh-keygen` is not installed'
  # check_for_command 'ssh-keyscan' || __log 'fatal' '`ssh-keyscan` is not installed'

  # mkdir -p "$HOME/.ssh"

  # __log 'Adding github.com to SSH known hosts'
  # ssh-keyscan github.com >>$HOME/.ssh/known_hosts || __log 'error' 'Failed to scan github.com'
  # test -f "$HOME/.ssh/id_ed25519" || ssh-keygen -b 4096 -t ed25519

  # __log 'prompt' "Has the following public key been added to GitHub?\n\n$(cat ~/.ssh/id_ed25519.pub)\n"
  # read key_added
  # case $key_added in
  # y) __log 'debug' 'Key added!' ;;
  # n) __log 'debug' 'Key not confirmed to be added, some commands may not work' ;;
  # *) __log 'error' "Unknown [$key_added]" ;;
  # esac

  __log "Cloning the dotfiles repo to $TMP_DFP"
  git clone $DOTFILES_REPO $TMP_DFP
}

main() {
  local terminal_cols=$(tput cols || echo '120')
  export PATH="$HOME/.local/bin:$PATH"
  export HEADER='This is a work in progress'
  declare -i header_length=terminal_cols/2
  __log 'warn' "$(pad $header_length "$HEADER")"
  __log 'debug' "Is Root?         : $(executed_as_root)"
  __log 'debug' "Terminal Columns : $terminal_cols"
  __log 'debug' "Header Length    : $header_length"
  __log 'debug' "Is Root?         : $IS_ROOT"
  __log 'debug' "Dotfiles Repo    : $DOTFILES_REPO"
  __log 'debug' "DFP              : $DFP"
  __log 'debug' "Platform         : $PLATFORM"
  __log 'debug' "Brew Binary      : $BREW_BINARY"
  __log 'debug' "User ID          : $USER_ID"
  __log 'debug' "User Group ID    : $GROUP_ID"

  case $PLATFORM in
  macos | darwin) platform_mac || __log 'fatal' 'Failed to configure platform OS X' ;;
  linux) platform_linux || __log 'fatal' 'Failed to configure platform Linux' ;;
  *) __log 'fatal' "Unsupported/Unknown platform [$PLATFORM]" ;;
  esac

  PYTHON_BINARY="$(command -v python3)"
  __log 'debug' "Python Binary    : $PYTHON_BINARY"
  python_packages
  clone

  # Run our ansible playbook to configure the main system
  ansible_run

  # Source the latest fisher and run fisher update
  fish -c "curl -sL https://git.io/fisher | source && fisher update; set -gp fish_function_path '$DFP/configs/fish/functions'; and dotfiles.update -A"

  __log 'Completed!'
}

export BREW_BINARY="$(command -v brew)"
export TMP_DFP="/tmp/dotfiles"
export DFP="$HOME/git/github.com/reynn/dotfiles"
export DOTFILES_REPO="https://github.com/reynn/dotfiles"
export GROUP_ID="$(id -g)"
export IS_ROOT="$(executed_as_root)"
export USER_ID="$(id -u)"
export PLATFORM="$(uname | tr '[:upper:]' '[:lower:]')"

main $@
