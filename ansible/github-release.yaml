# expected data structure:
#   repository: string
#   alias: string
#   platform: string

- name: "Configure basic vars for {{ item.repository }}"
  set_fact:
    glrfg_host: "{{ item.host | default('api.github.com') }}"
    glrfg_owner: "{{ item.repository.split('/')[0] }}"
    glrfg_repository: "{{ item.repository.split('/')[-1] }}"
    glrfg_platform: "{{ item.platform | default(omit)}}"
    glrfg_bins_path: "{{ bins_dir }}/{{ item.repository.split('/')[-1] }}_bin"
    glrfg_alias_path: "{{ bins_dir }}/{{ item.alias | default(item.repository.split('/')[-1]) }}"

- name: "Display init"
  debug:
    msg: |
      glrfg_host={{ glrfg_host | default('') }}
      glrfg_owner={{ glrfg_owner | default('') }}
      glrfg_repository={{ glrfg_repository | default('') }}
      glrfg_platform={{ glrfg_platform | default('') }}
      glrfg_bins_path={{ glrfg_bins_path | default('') }}
      glrfg_alias_path={{ glrfg_alias_path | default('') }}
  when: debug_mode|default(False)|bool

- name: "Create Binary subdirectory"
  file:
    path: "{{ glrfg_bins_path }}"
    state: directory

- name: "Determining appropriate asset to download from GitHub for {{ item.repository }} wo-Platform"
  shell: "helpers gh get asset --host {{ glrfg_host }} --owner {{ glrfg_owner }} --repo {{ glrfg_repository }}"
  register: glrfg_binary_shell
  when: glrfg_platform is not defined

- name: "Configure release variables wo-Platform"
  set_fact:
    glrfg_name: "{{ (glrfg_binary_shell.stdout | from_json)[0].name }}"
    glrfg_url: "{{ (glrfg_binary_shell.stdout | from_json)[0].url }}"
    glrfg_type: "{{ (glrfg_binary_shell.stdout | from_json)[0].type }}"
    glrfg_tag: "{{ (glrfg_binary_shell.stdout | from_json)[0].tag }}"
  when: glrfg_platform is not defined

- name: "Determining appropriate asset to download from GitHub for {{ item.repository }} w-Platform"
  shell: "helpers gh get asset --host {{ glrfg_host }} --owner {{ glrfg_owner }} --repo {{ glrfg_repository }} -p '{{ glrfg_platform }}'"
  register: glrfg_binary_shell
  when: glrfg_platform is defined

- name: "Configure release variables w-Platform"
  set_fact:
    glrfg_name: "{{ (glrfg_binary_shell.stdout | from_json)[0].name }}"
    glrfg_url: "{{ (glrfg_binary_shell.stdout | from_json)[0].url }}"
    glrfg_type: "{{ (glrfg_binary_shell.stdout | from_json)[0].type }}"
    glrfg_tag: "{{ (glrfg_binary_shell.stdout | from_json)[0].tag }}"
  when: glrfg_platform is defined

- debug:
    msg: |
      glrfg_name={{ glrfg_name }}
      glrfg_url={{ glrfg_url }}
      glrfg_type={{ glrfg_type }}
      glrfg_tag={{ glrfg_tag }}
  when: debug_mode|default(False)|bool

- name: "Handle download and recovery"
  block:
    - name: "Creating version subdirectory"
      file:
        path: "{{ glrfg_bins_path }}/{{ glrfg_tag }}"
        state: directory

    - name: "Downloading binary"
      get_url:
        url: "{{ glrfg_url }}"
        dest: "{{ glrfg_bins_path }}/{{ glrfg_tag }}/{{ glrfg_name }}"
        follow: yes
      register: glrfg_get_url

    - name: "debug (glrfg_get_url) output"
      debug:
        var: glrfg_get_url
      when: debug_mode|default(False)|bool

    - name: "Extract archive file"
      shell: |
        #!/usr/bin/env bash
        set -eou setpipefail

        {{ dotfiles_path }}/scripts/extract -i {{ glrfg_get_url.dest }}
      when: "glrfg_get_url.changed"

    - name: "Extracting gzip file"
      shell: |
        #!/bin/bash -e
        tar xf {{ glrfg_get_url.dest }} -C {{ glrfg_bins_path }}/{{ glrfg_tag }}
        find {{ glrfg_bins_path }}/{{ glrfg_tag }} -type f -perm -111 | grep -v .tar.gz
      register: glrfg_extract_gzip
      when:
        - 'glrfg_type == "application/gzip" or glrfg_name.find(".tar.gz") >= 1'
        - "glrfg_get_url.changed"

    - name: "Extracting zip file"
      shell: |
        #!/bin/bash -e
        unzip -qq {{ glrfg_get_url.dest }} -d {{ glrfg_bins_path }}/{{ glrfg_tag }}
        find {{ glrfg_bins_path }}/{{ glrfg_tag }} -type f -perm -111
      register: glrfg_extract_zip
      when:
        - 'glrfg_type == "application/zip"'
        - "glrfg_get_url.changed"

    - name: "Remove alias before linking"
      file:
        path: "{{ glrfg_alias_path }}"
        state: absent
      when: "glrfg_get_url.changed"

    - name: "Register symlink after extracting gzip"
      file:
        src: "{{ glrfg_extract_gzip.stdout | replace('./', '') }}"
        path: "{{ glrfg_alias_path }}"
        state: link
      when: "glrfg_extract_gzip.changed"

    - name: "Register symlink after extracting zip"
      file:
        src: "{{ glrfg_extract_zip.stdout | replace('./', '') }}"
        path: "{{ glrfg_alias_path }}"
        state: link
      when: "glrfg_extract_zip.changed"

    - name: "Mark binary as executable"
      file:
        path: "{{ glrfg_get_url.dest }}"
        mode: "u=rwx,g=rwx,o=rwx"
      register: glrfg_executable
      when:
        - 'glrfg_type == "application/octet-stream"'
        - '".deb" not in glrfg_name'
        - '".tar.gz" not in glrfg_name'
        - "glrfg_get_url.changed"

    - name: "Install deb package"
      apt:
        deb: "{{ glrfg_get_url.dest }}"
      register: glrfg_deb_install
      when:
        - 'glrfg_type == "application/octet-stream"'
        - '".deb" in glrfg_name'
        - "glrfg_get_url.changed"

    - name: "Register symlink after binary + exec"
      file:
        src: "{{ glrfg_get_url.dest }}"
        path: "{{ glrfg_alias_path }}"
        state: link
      when:
        - "glrfg_executable.changed"
  ignore_errors: yes
  rescue:
    - name: "Cleanup failed download"
      file:
        path: "{{ glrfg_bins_path }}/{{ glrfg_tag }}"
        state: absent
