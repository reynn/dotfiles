---
# tasks file for base
- debug:
    var: "ansible_os_family"

- name: "Create necessary files, folders and links"
  ansible.builtin.file:
    src: "{{ item.src | default(omit) }}"
    dest: "{{ item.dest }}"
    force: yes
    state: "{{ item.state | default('link') }}"
  loop: "{{ to_create + extra_to_create|default([]) }}"
  loop_control:
    label: "{{ item.dest }}"

- name: "Create SSH Private Keys"
  ansible.builtin.copy:
    content: "{{ item.private_key }}"
    dest: "{{ ansible_user_dir }}/.ssh/keys/{{ item.host }}"
    mode: "u=rw,g=,o="
  loop: "{{ ssh_keys }}"
  loop_control:
    label: "{{ item.host }}"
  tags: [ssh]

- name: "Create SSH Public Keys"
  ansible.builtin.copy:
    content: "{{ item.public_key }}"
    dest: "{{ ansible_user_dir }}/.ssh/keys/{{ item.host }}.pub"
    mode: "u=rw,g=r,o=r"
  loop: "{{ ssh_keys }}"
  loop_control:
    label: "{{ item.host }}"
  tags: [ssh]

- name: "Adding {{ ssh_hosts | length }} hosts the user SSH configuration"
  community.general.ssh_config:
    user: "{{ item.user | default(omit) }}"
    host: "{{ item.host }}"
    hostname: "{{ item.hostname }}"
    identity_file: "{{ item.identity_file | default(omit) }}"
    port: "{{ item.port | default(22) }}"
    ssh_config_file: "{{ ansible_user_dir }}/.ssh/config"
    state: present
  loop: "{{ ssh_hosts }}"
  loop_control:
    label: "{{ item.host }}"
  tags: [ssh]

- name: "Handle OS Specifics"
  ansible.builtin.include_tasks: "os/{{ ansible_os_family | lower }}.yaml"
  tags: [os]

- name: "Installing pip packages"
  ansible.builtin.pip:
    name: "{{ packages.pip }}"
    state: latest
    extra_args: --user
  tags: [pip, packages]

- name: "Installing cargo packages"
  ansible.builtin.command:
    argv:
      - cargo
      - install
      - --force
      - "{{ item }}"
  loop: "{{ packages.cargo }}"
  tags: [packages, cargo]

- name: "Clone git repos"
  ansible.builtin.git:
    repo: "{{ item.repo }}"
    dest: "{{ item.dest }}"
    depth: 1
  ignore_errors: "{{ item.ignore_errors | default('no') }}"
  loop: "{{ git_repos }}"
  loop_control:
    label: "{{ item.repo }}"
  register: git_clone_results
  notify: "{{ item.handler | default(omit) }}"
  tags: [git, repos]

- name: "Downloading scripts"
  ansible.builtin.get_url:
    url: "{{ item.url }}"
    dest: "{{ item.dir | default(ansible_user_dir + '/.local/bin') }}/{{ item.name }}"
    mode: u=rwx,g=rx,o=rx
    owner: "{{ ansible_user_uid | quote }}"
    group: "{{ ansible_user_gid | quote }}"
  register: base_script_downloads
  when: item.url is defined
  loop: "{{ scripts + os_scripts|default([])}}"
  tags: [scripts]
# - name: "Exec commands"
#   ansible.builtin.command: "{{ item.cmd }}"
#   args:
#     chdir: "{{ item.dir | default('.') }}"
#   loop: "{{ commands }}"
#   tags:
#     - commands
