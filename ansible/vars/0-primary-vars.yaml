# ------------
# Strings

# ------------
# Lists
# TODO: Add ability to pull pre-releases
bin_downloads:
  # # Standard Unix binaries -----------------------------------------
  - repository: "neovim/neovim"
    description: "Vim-fork focused on extensibility and usability"
  - repository: "sharkdp/fd"
    description: "A simple, fast and user-friendly alternative to 'find'"
  - repository: "stedolan/jq"
    description: "CLI JSON processor"
    platform: "{{ (ansible_system == 'Linux') | ternary('linux64','amd64') }}"
  - repository: "mikefarah/yq"
    description: "yq is a portable command-line YAML processor"
  - repository: "PowerShell/PowerShell"
    description: "PowerShell for every system!"
  - repository: "starship/starship"
    description: "The cross-shell prompt for astronauts"
  # # Kubernetes Apps ------------------------------------------------
  # - repository: "weaveworks/eksctl"
  #   description: "The official CLI for Amazon EKS"
  - repository: "wercker/stern"
    description: "K8s logging helper"
  - repository: "derailed/k9s"
    description: "Kubernetes CLI To Manage Your Clusters In Style!"
  # - repository: "helm/helm"
  #   description: "Kubernetes Workstation Tools CLI"
  - repository: "kubernetes/minikube"
    description: "Run Kubernetes locally"
  # - repository: "goodwithtech/dockle"
  #   description: "Container Image Linter for Security"
  # - repository: "operator-framework/operator-sdk"
  #   description: "SDK for building Kubernetes applications"
  # # Cloud native tool binaries -------------------------------------
  - repository: "digitalocean/doctl"
    description: "The official command line interface for the DigitalOcean API"

bins_dir: "{{ ansible_env.HOME }}/.bins"
git_path: "{{ ansible_env.HOME }}/git"
github_path: "{{ git_path }}/github.com"
dotfiles_path: "{{ github_path }}/reynn/dotfiles"

commands:
  - cmd: "go build -o {{ bins_dir }}/helpers main.go"
    dir: "{{ dotfiles_path }}/go/helpers"
  - cmd: "sh /tmp/antibody -b {{ bins_dir }}"

docker_images:
  - name: fantia.jp
    source: build
    build:
      pull: yes
      path: "{{ dotfiles_path }}/docker/fantia.jp"
  - name: pixiv
    source: build
    build:
      pull: yes
      path: "{{ dotfiles_path }}/docker/pixiv"
  - name: yiff.party
    source: build
    build:
      pull: yes
      path: "{{ dotfiles_path }}/docker/yiff.party"

# Ignoring errors on personal repos so we can proceed when there are local changes
git_repos:
  - repo: "git@github.com:reynn/dotfiles.git"
    dest: "{{ dotfiles_path }}"
    ignore_errors: yes
  - repo: "git@github.com:reynn/k8s.git"
    dest: "{{ github_path }}/reynn/k8s"
    ignore_errors: yes
  - repo: "git@github.com:reynn/k8s-ops.git"
    dest: "{{ github_path }}/reynn/k8s-ops"
    ignore_errors: yes
  - repo: "git@github.com:thecasualcoder/kube-fzf.git"
    dest: "{{ github_path }}/thecasualcoder/kube-fzf"
  - repo: "git@github.com:mbadolato/iTerm2-Color-Schemes.git"
    dest: "{{ github_path }}/mbadolato/iterm2-color"
  - repo: "git@github.com:powerline/fonts.git"
    dest: "{{ github_path }}/powerline/fonts"
  - repo: "git@github.com:junegunn/fzf.git"
    dest: "{{ github_path }}/junegunn/fzf"
    handler: "Run fzf install script"
  - repo: "git@github.com:ryanoasis/nerd-fonts.git"
    dest: "{{ github_path }}/ryanoasis/nerd-fonts"
  - repo: "git@github.com:pyenv/pyenv.git"
    dest: "{{ github_path }}/pyenv/pyenv"
  - repo: "git@github.com:VundleVim/Vundle.vim.git"
    dest: "{{ ansible_env.HOME }}/.vim/bundle/Vundle.vim"

# ------------
# Maps
packages:
  system:
    - zsh
    - git
    - curl
    - wget
    - tmux
    - neovim
  pip:
    - ansible
    - certifi
    - httpie
    - docker
    - neovim
  cargo:
    - exa
    - ripgrep
  brew:
    - tmux
    - neovim

scripts:
  - name: "gimme"
    url: "https://raw.githubusercontent.com/travis-ci/gimme/master/gimme"
    dir: "{{ bins_dir }}"
  - name: "antibody"
    url: "https://git.io/antibody"
    dir: "/tmp"
  - name: "nvm"
    url: "https://raw.githubusercontent.com/nvm-sh/nvm/master/install.sh"
    dir: "{{ bins_dir }}"

to_create:
  # - path: "{{ ansible_env.XDG_CACHE_HOME }}"
  #   state: directory
  # - path: "{{ ansible_env.XDG_DATA_HOME }}"
  #   state: directory
  # - path: "{{ ansible_env.XDG_CONFIG_HOME }}"
  #   state: directory
  - path: "{{ ansible_env.HOME }}/.config/fish/functions"
    src: "{{ dotfiles_path }}/configs/fish/functions"
    state: link
  - path: "{{ ansible_env.HOME }}/.config/fish/completions"
    src: "{{ dotfiles_path }}/configs/fish/completions"
    state: link
  - path: "{{ ansible_env.HOME }}/.config/omf"
    src: "{{ dotfiles_path }}/configs/oh-my-fish"
    state: link
  - path: "{{ ansible_env.HOME }}/.SpaceVim.d"
    src: "{{ dotfiles_path }}/configs/spacevim"
    state: link
  - path: "{{ ansible_env.HOME }}/.config/nvim"
    src: "{{ ansible_env.HOME }}/.SpaceVim"
    state: link
  - path: "{{ ansible_env.HOME }}/.gitconfig"
    src: "{{ dotfiles_path }}/configs/git/gitconfig"
    state: link
