---
- hosts: localhost
  force_handlers: yes
  gather_facts: yes

  handlers:
    - name: "Run fzf install script"
      shell: "{{ git_path }}/github.com/junegunn/fzf/install --bin --no-key-bindings --no-completion --no-update-rc"

  tasks:
    - name: Include universal variables
      include_vars: "vars/0-primary-vars.yaml"
      tags:
        - always

    - name: "Include the platform-specific variables"
      include_vars: "vars/1-{{ ansible_os_family | lower }}.yaml"
      tags:
        - always

    - name: "Create necessary files, folders and links"
      ansible.builtin.file:
        src: "{{ item.src | default(omit) }}"
        dest: "{{ item.dest }}"
        force: yes
        state: "{{ item.state | default('link') }}"
      loop: "{{ to_create + extra_to_create|default([]) }}"
      tags:
        - always
        - links

    - name: "Install certificate handling for darwin"
      ansible.builtin.shell: "sh '/Applications/Python
        {{ ansible_python.version.major }}.{{ ansible_python.version.minor }}/Install\
        Certificates.command'"
      register: cert_handler
      changed_when: '"Requirement already up-to-date" not in cert_handler.stdout'
      when: ansible_os_family|lower == 'darwin'
      tags:
        - never
        - pip

    - name: "Install packages with DNF"
      ansible.builtin.dnf:
        name: "{{ packages.system.basic + packages.system.dnf|default([]) }}"
        state: "latest"
        update_cache: "yes"
      when: "ansible_pkg_mgr|lower == 'dnf'"
      tags:
        - packages
        - update
      become: yes

    - name: "Install packages with Apt"
      ansible.builtin.apt:
        name: "{{ packages.system.basic + packages.system.apt|default([]) }}"
        state: "latest"
        update_cache: "yes"
      when: "ansible_pkg_mgr|lower == 'apt'"
      tags:
        - packages
        - update
      become: yes

    - name: "Install packages with Pacman"
      ansible.builtin.pacman:
        name: "{{ packages.system.basic + packages.system.pacman|default([]) }}"
        state: "latest"
        update_cache: "yes"
      when: "ansible_pkg_mgr|lower == 'pacman'"
      tags:
        - packages
        - update
      become: yes

    - name: "Installing pip packages"
      ansible.builtin.pip:
        name: "{{ packages.pip }}"
        state: latest
        extra_args: --user
      tags:
        - pip
        - packages
        - update

    - name: "Installing cargo packages"
      ansible.builtin.command:
        argv:
          - cargo
          - install
          - "{{ item }}"
      loop: "{{ packages.cargo }}"
      tags:
        - never
        - packages
        - cargo

    - name: "Clone git repos"
      ansible.builtin.git:
        repo: "{{ item.repo }}"
        dest: "{{ item.dest }}"
        depth: 1
      ignore_errors: "{{ item.ignore_errors | default('no') }}"
      loop: "{{ git_repos }}"
      loop_control:
        label: "{{ item.repo }}"
      register: git_clone_results
      notify: "{{ item.handler | default(omit) }}"
      tags:
        - update
        - git
        - repos

    - name: "Ensure binary dirs exist"
      ansible.builtin.file:
        path: "{{ bins_dir | default(ansible_env.HOME + '/.bins') }}"
        state: directory
        mode: u=rwx,g=rx,o=rx
      tags:
        - scripts
        - update

    - name: "Downloading scripts"
      ansible.builtin.get_url:
        url: "{{ item.url }}"
        dest: "{{ item.dir | default(bins_dir) }}/{{ item.name }}"
        mode: u=rwx,g=rx,o=rx
        owner: "{{ ansible_user_uid | quote }}"
        group: "{{ ansible_user_gid | quote }}"
      register: base_script_downloads
      when: item.url is defined
      loop: "{{ scripts + os_scripts|default([])}}"
      tags:
        - scripts
        - commands
        - update

    - name: "Exec commands"
      ansible.builtin.command: "{{ item.cmd }}"
      args:
        chdir: "{{ item.dir | default('.') }}"
      loop: "{{ commands }}"
      tags:
        - commands
    # - name: "Build Docker images"
    #   docker_image: "{{ item }}"
    #   loop: "{{ docker_images }}"
    #   loop_control:
    #     label: "{{ item.name }}"
    #   tags:
    #     - never
    #     - docker
