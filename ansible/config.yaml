---
- hosts: localhost
  force_handlers: yes

  handlers:
    - name: "Run fzf install script"
      shell: "{{ git_path }}/github.com/junegunn/fzf/install --bin --64"

  tasks:
    - name: Include vars from ansible directory
      include_vars:
        dir: "{{ playbook_dir }}/vars"
        ignore_unknown_extensions: yes
      tags:
        - always

    - name: Install certificate handling for darwin
      shell: "sh '/Applications/Python {{ansible_python.version.major}}.{{ansible_python.version.minor}}/Install Certificates.command'"
      register: cert_handler
      changed_when: 'not "Requirement already up-to-date" not in cert_handler.stdout'
      when: ansible_system == 'Darwin'
      tags:
        - pip

    - name: Install packages
      package:
        name: "{{ packages.system }}"
        state: present
      when:
        - ansible_system == 'Linux'
      become: yes

    - name: Installing brew packages
      homebrew:
        name: "{{ packages.brew }}"
        state: latest
      when:
        - ansible_system == 'Darwin'
      tags:
        - brew
        - update

    - name: Installing pip packages
      pip:
        name: "{{ packages.pip }}"
        state: latest
        extra_args: --user
      tags:
        - pip
        - update

    - name: Installing cargo packages
      command:
        argv:
          - cargo
          - install
          - -f
          - "{{ item }}"
      loop: "{{ packages.cargo }}"
      tags:
        - cargo
        - update

    - name: "Create Symlinks"
      file:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        force: yes
        state: "{{ item.state | default('link') }}"
      loop: "{{ file_links }}"
      tags:
        - update
        - links

    - name: Clone git repos
      git:
        repo: "{{ item.repo }}"
        dest: "{{ item.dest }}"
        depth: 1
      ignore_errors: "{{ item.ignore_errors | default('no') }}"
      loop: "{{ git_repos }}"
      loop_control:
        label: "{{ item.repo }}"
      register: git_clone_results
      notify: "{{ item.handler | default(omit) }}"
      tags:
        - update
        - git
        - repos

    - name: Ensure binary dirs exist
      file:
        path: "{{ binary_dir | default(ansible_env.HOME + '/.bins') }}"
        state: directory
        mode: u=rwx,g=rx,o=rx
      tags:
        - binaries
        - scripts
        - update

    - name: Build Docker images
      docker_image: "{{ item }}"
      loop: "{{ docker_images }}"
      loop_control:
        label: "{{ item.name }}"
      tags:
        - docker

    - name: Downloading scripts
      get_url:
        url: "{{ item.url }}"
        dest: "{{ item.dir }}/{{ item.name }}"
        mode: u=rwx,g=rx,o=rx
        owner: "{{ ansible_user_uid | quote }}"
        group: "{{ ansible_user_gid | quote }}"
      register: base_script_downloads
      when: item.url is defined
      loop: "{{ scripts }}"
      tags:
        - scripts
        - commands
        - update

    - name: Exec gimme
      shell: 'eval "$(gimme stable)"'
      tags:
        - commands
        - scripts
        - binaries
        - updates

    - name: Exec commands
      command: "{{ item.cmd }}"
      args:
        chdir: "{{ item.dir | default('.') }}"
      loop: "{{ commands }}"
      tags:
        - commands

    - include_tasks:
        file: "{{ ansible_env.PWD }}/github-release.yaml"
        apply:
          tags:
            - binaries
            - update
      loop: "{{ bin_downloads | sort(attribute='repository') }}"
      tags:
        - binaries
        - update

    - name: Set the default shell to zsh
      user:
        name: "{{ ansible_user_id }}"
        shell: /bin/zsh
