# expected data structure:
# name: string
# alias: string
# git:
#   repo: string
#   host: string
#   owner: string

- set_fact:
    get_latest_release_from_github_bins_path: "{{ bins_dir }}/{{ item.name }}_bin"
    get_latest_release_from_github_alias_path: "{{ bins_dir }}/{{ item.alias | default(item.git.repo) }}"
  tags:
    - binaries
    - update

- name: Create Binary subdirectory
  file:
    path: "{{ get_latest_release_from_github_bins_path }}"
    state: directory
  tags:
    - binaries
    - update

- name: "Determining appropriate asset to download from GitHub for {{ item.name }}"
  shell: helpers gh get asset --owner {{ item.git.owner }} --repo {{ item.git.repo }}
  register: get_latest_binary_shell
  tags:
    - binaries
    - update

- debug:
    var: get_latest_binary_shell
  tags:
    - binaries
    - update

- name:
  set_fact:
    get_latest_release_from_github_name: "{{ (get_latest_binary_shell.stdout | from_json)[0].name }}"
    get_latest_release_from_github_url: "{{ (get_latest_binary_shell.stdout | from_json)[0].url }}"
    get_latest_release_from_github_type: "{{ (get_latest_binary_shell.stdout | from_json)[0].type }}"
    get_latest_release_from_github_tag: "{{ (get_latest_binary_shell.stdout | from_json)[0].tag }}"
  tags:
    - binaries
    - update

- name: "Checking if destination download already exists exists"
  shell: test -r {{ get_latest_release_from_github_bins_path }}/{{ get_latest_release_from_github_tag }}/{{ get_latest_release_from_github_name }}
  register: get_latest_release_from_github_out_exists
  changed_when: get_latest_release_from_github_out_exists.stderr != ""
  failed_when: get_latest_release_from_github_out_exists.stderr != ""
  tags:
    - binaries
    - update

- name: Creating version subdirectory
  file:
    path: "{{ get_latest_release_from_github_bins_path }}/{{ get_latest_release_from_github_tag }}"
    state: directory
  tags:
    - binaries
    - update

- name: "Downloading binary"
  get_url:
    url: "{{ get_latest_release_from_github_url }}"
    dest: "{{ get_latest_release_from_github_bins_path }}/{{ get_latest_release_from_github_tag }}/{{ get_latest_release_from_github_name }}"
  register: get_latest_release_from_github_get_url
  when: 'get_latest_release_from_github_out_exists.rc == 1'
  tags:
    - binaries
    - update

- name: "Extracting gzip file"
  shell: |
    #!/bin/bash -e
    tar xf {{ get_latest_release_from_github_get_url.dest }} -C {{ get_latest_release_from_github_bins_path }}/{{ get_latest_release_from_github_tag }}
    find {{ get_latest_release_from_github_bins_path }}/{{ get_latest_release_from_github_tag }} -type f -perm +111
  register: get_latest_release_from_github_extract_gzip
  when:
    - 'get_latest_release_from_github_type == "application/gzip"'
    - 'get_latest_release_from_github_get_url.changed'
  tags:
    - binaries
    - update

- name: Extracting zip file
  shell: |
    #!/bin/bash -e
    unzip -qq {{ get_latest_release_from_github_get_url.dest }} -d {{ get_latest_release_from_github_bins_path }}/{{ get_latest_release_from_github_tag }}
    find {{ get_latest_release_from_github_bins_path }}/{{ get_latest_release_from_github_tag }} -type f -perm +111
  register: get_latest_release_from_github_extract_zip
  when:
    - 'get_latest_release_from_github_type == "application/zip"'
    - 'get_latest_release_from_github_get_url.changed'
  tags:
    - binaries
    - update

- name: Remove alias before linking
  file:
    path: "{{ get_latest_release_from_github_alias_path }}"
    state: absent
  when: 'get_latest_release_from_github_get_url.changed'
  tags:
    - binaries
    - update

- name: "Register symlink after extracting gzip"
  file:
    src: "{{ get_latest_release_from_github_extract_gzip.stdout | replace('./', '') }}"
    path: "{{ get_latest_release_from_github_alias_path }}"
    state: link
  when: 'get_latest_release_from_github_extract_gzip.changed'
  tags:
    - binaries
    - update

- name: "Register symlink after extracting zip"
  file:
    src: "{{ get_latest_release_from_github_extract_zip.stdout | replace('./', '') }}"
    path: "{{ get_latest_release_from_github_alias_path }}"
    state: link
  when: 'get_latest_release_from_github_extract_zip.changed'
  tags:
    - binaries
    - update

- name: Mark binary as executable
  file:
    path: "{{ get_latest_release_from_github_get_url.dest }}"
    mode: "u=rwx,g=rwx,o=rwx"
  register: get_latest_release_from_github_executable
  when:
    - 'get_latest_release_from_github_type == "application/octet-stream"'
    - '".deb" not in get_latest_release_from_github_name'
    - 'get_latest_release_from_github_get_url.changed'
  tags:
    - binaries
    - update

- name: Install deb package
  apt:
    deb: "{{ get_latest_release_from_github_get_url.dest }}"
  register: get_latest_release_from_github_deb_install
  when:
    - 'get_latest_release_from_github_type == "application/octet-stream"'
    - '".deb" in get_latest_release_from_github_name'
    - 'get_latest_release_from_github_get_url.changed'
  tags:
    - binaries
    - update

- name: "Register symlink after binary + exec"
  file:
    src: "{{ get_latest_release_from_github_get_url.dest }}"
    path: "{{ get_latest_release_from_github_alias_path }}"
    state: link
  when:
    - 'get_latest_release_from_github_executable.changed'
  tags:
    - binaries
    - update
